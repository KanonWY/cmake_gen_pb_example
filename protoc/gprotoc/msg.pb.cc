// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_msg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseContent_NamespaceConfigMapEntry_DoNotUse;
}  // namespace protobuf_msg_2eproto
namespace EAST_TCP {
class MsgContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgContent>
      _instance;
} _MsgContent_default_instance_;
class RequestContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestContent>
      _instance;
} _RequestContent_default_instance_;
class ResponseContent_NamespaceConfigMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseContent_NamespaceConfigMapEntry_DoNotUse>
      _instance;
} _ResponseContent_NamespaceConfigMapEntry_DoNotUse_default_instance_;
class ResponseContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseContent>
      _instance;
} _ResponseContent_default_instance_;
}  // namespace EAST_TCP
namespace protobuf_msg_2eproto {
static void InitDefaultsMsgContent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EAST_TCP::_MsgContent_default_instance_;
    new (ptr) ::EAST_TCP::MsgContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EAST_TCP::MsgContent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MsgContent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMsgContent}, {}};

static void InitDefaultsRequestContent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EAST_TCP::_RequestContent_default_instance_;
    new (ptr) ::EAST_TCP::RequestContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EAST_TCP::RequestContent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestContent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestContent}, {}};

static void InitDefaultsResponseContent_NamespaceConfigMapEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EAST_TCP::_ResponseContent_NamespaceConfigMapEntry_DoNotUse_default_instance_;
    new (ptr) ::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse();
  }
  ::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseContent_NamespaceConfigMapEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseContent_NamespaceConfigMapEntry_DoNotUse}, {}};

static void InitDefaultsResponseContent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::EAST_TCP::_ResponseContent_default_instance_;
    new (ptr) ::EAST_TCP::ResponseContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EAST_TCP::ResponseContent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseContent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseContent}, {
      &protobuf_msg_2eproto::scc_info_ResponseContent_NamespaceConfigMapEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MsgContent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestContent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseContent_NamespaceConfigMapEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseContent.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::MsgContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::MsgContent, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::MsgContent, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::MsgContent, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::RequestContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::RequestContent, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::RequestContent, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::RequestContent, host_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::RequestContent, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::RequestContent, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::RequestContent, namespace_vec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent, ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EAST_TCP::ResponseContent, namespace_config_map_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::EAST_TCP::MsgContent)},
  { 8, -1, sizeof(::EAST_TCP::RequestContent)},
  { 19, 26, sizeof(::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse)},
  { 28, -1, sizeof(::EAST_TCP::ResponseContent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::EAST_TCP::_MsgContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EAST_TCP::_RequestContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EAST_TCP::_ResponseContent_NamespaceConfigMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::EAST_TCP::_ResponseContent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "msg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tmsg.proto\022\010EAST_TCP\"O\n\nMsgContent\022\017\n\007v"
      "ersion\030\001 \001(\t\022\037\n\003cmd\030\002 \001(\0162\022.EAST_TCP.CMD"
      "_TYPE\022\017\n\007content\030\003 \001(\014\"}\n\016RequestContent"
      "\022\021\n\ttimestamp\030\001 \001(\003\022\020\n\010sequence\030\002 \001(\003\022\021\n"
      "\thost_info\030\003 \001(\t\022\r\n\005token\030\004 \001(\t\022\r\n\005appid"
      "\030\005 \001(\t\022\025\n\rnamespace_vec\030\006 \003(\t\"\314\001\n\017Respon"
      "seContent\022\021\n\ttimestamp\030\001 \001(\003\022\013\n\003ack\030\002 \001("
      "\003\022\r\n\005appid\030\003 \001(\t\022O\n\024namespace_config_map"
      "\030\004 \003(\01321.EAST_TCP.ResponseContent.Namesp"
      "aceConfigMapEntry\0329\n\027NamespaceConfigMapE"
      "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*3\n\010"
      "CMD_TYPE\022\014\n\010NULL_CMD\020\000\022\013\n\007REQUEST\020\001\022\014\n\010R"
      "ESPONSE\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_msg_2eproto
namespace EAST_TCP {
const ::google::protobuf::EnumDescriptor* CMD_TYPE_descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_enum_descriptors[0];
}
bool CMD_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MsgContent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgContent::kVersionFieldNumber;
const int MsgContent::kCmdFieldNumber;
const int MsgContent::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgContent::MsgContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_2eproto::scc_info_MsgContent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EAST_TCP.MsgContent)
}
MsgContent::MsgContent(const MsgContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:EAST_TCP.MsgContent)
}

void MsgContent::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0;
}

MsgContent::~MsgContent() {
  // @@protoc_insertion_point(destructor:EAST_TCP.MsgContent)
  SharedDtor();
}

void MsgContent::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MsgContent::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgContent& MsgContent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_2eproto::scc_info_MsgContent.base);
  return *internal_default_instance();
}


void MsgContent::Clear() {
// @@protoc_insertion_point(message_clear_start:EAST_TCP.MsgContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0;
  _internal_metadata_.Clear();
}

bool MsgContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EAST_TCP.MsgContent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EAST_TCP.MsgContent.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EAST_TCP.CMD_TYPE cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::EAST_TCP::CMD_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EAST_TCP.MsgContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EAST_TCP.MsgContent)
  return false;
#undef DO_
}

void MsgContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EAST_TCP.MsgContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.MsgContent.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // .EAST_TCP.CMD_TYPE cmd = 2;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EAST_TCP.MsgContent)
}

::google::protobuf::uint8* MsgContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EAST_TCP.MsgContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.MsgContent.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // .EAST_TCP.CMD_TYPE cmd = 2;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EAST_TCP.MsgContent)
  return target;
}

size_t MsgContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EAST_TCP.MsgContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .EAST_TCP.CMD_TYPE cmd = 2;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EAST_TCP.MsgContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EAST_TCP.MsgContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EAST_TCP.MsgContent)
    MergeFrom(*source);
  }
}

void MsgContent::MergeFrom(const MsgContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EAST_TCP.MsgContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void MsgContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EAST_TCP.MsgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgContent::CopyFrom(const MsgContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EAST_TCP.MsgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgContent::IsInitialized() const {
  return true;
}

void MsgContent::Swap(MsgContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgContent::InternalSwap(MsgContent* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cmd_, other->cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MsgContent::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestContent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestContent::kTimestampFieldNumber;
const int RequestContent::kSequenceFieldNumber;
const int RequestContent::kHostInfoFieldNumber;
const int RequestContent::kTokenFieldNumber;
const int RequestContent::kAppidFieldNumber;
const int RequestContent::kNamespaceVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestContent::RequestContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_2eproto::scc_info_RequestContent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EAST_TCP.RequestContent)
}
RequestContent::RequestContent(const RequestContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      namespace_vec_(from.namespace_vec_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_info().size() > 0) {
    host_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_info_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appid().size() > 0) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:EAST_TCP.RequestContent)
}

void RequestContent::SharedCtor() {
  host_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(sequence_));
}

RequestContent::~RequestContent() {
  // @@protoc_insertion_point(destructor:EAST_TCP.RequestContent)
  SharedDtor();
}

void RequestContent::SharedDtor() {
  host_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestContent::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestContent& RequestContent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_2eproto::scc_info_RequestContent.base);
  return *internal_default_instance();
}


void RequestContent::Clear() {
// @@protoc_insertion_point(message_clear_start:EAST_TCP.RequestContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace_vec_.Clear();
  host_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(sequence_));
  _internal_metadata_.Clear();
}

bool RequestContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EAST_TCP.RequestContent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_info().data(), static_cast<int>(this->host_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EAST_TCP.RequestContent.host_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EAST_TCP.RequestContent.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appid().data(), static_cast<int>(this->appid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EAST_TCP.RequestContent.appid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string namespace_vec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_namespace_vec()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_vec(this->namespace_vec_size() - 1).data(),
            static_cast<int>(this->namespace_vec(this->namespace_vec_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EAST_TCP.RequestContent.namespace_vec"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EAST_TCP.RequestContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EAST_TCP.RequestContent)
  return false;
#undef DO_
}

void RequestContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EAST_TCP.RequestContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int64 sequence = 2;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // string host_info = 3;
  if (this->host_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_info().data(), static_cast<int>(this->host_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.RequestContent.host_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->host_info(), output);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.RequestContent.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // string appid = 5;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), static_cast<int>(this->appid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.RequestContent.appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->appid(), output);
  }

  // repeated string namespace_vec = 6;
  for (int i = 0, n = this->namespace_vec_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_vec(i).data(), static_cast<int>(this->namespace_vec(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.RequestContent.namespace_vec");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->namespace_vec(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EAST_TCP.RequestContent)
}

::google::protobuf::uint8* RequestContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EAST_TCP.RequestContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int64 sequence = 2;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // string host_info = 3;
  if (this->host_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_info().data(), static_cast<int>(this->host_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.RequestContent.host_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host_info(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.RequestContent.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // string appid = 5;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), static_cast<int>(this->appid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.RequestContent.appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->appid(), target);
  }

  // repeated string namespace_vec = 6;
  for (int i = 0, n = this->namespace_vec_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_vec(i).data(), static_cast<int>(this->namespace_vec(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.RequestContent.namespace_vec");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->namespace_vec(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EAST_TCP.RequestContent)
  return target;
}

size_t RequestContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EAST_TCP.RequestContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string namespace_vec = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->namespace_vec_size());
  for (int i = 0, n = this->namespace_vec_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->namespace_vec(i));
  }

  // string host_info = 3;
  if (this->host_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_info());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string appid = 5;
  if (this->appid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EAST_TCP.RequestContent)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EAST_TCP.RequestContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EAST_TCP.RequestContent)
    MergeFrom(*source);
  }
}

void RequestContent::MergeFrom(const RequestContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EAST_TCP.RequestContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namespace_vec_.MergeFrom(from.namespace_vec_);
  if (from.host_info().size() > 0) {

    host_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_info_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.appid().size() > 0) {

    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void RequestContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EAST_TCP.RequestContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestContent::CopyFrom(const RequestContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EAST_TCP.RequestContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestContent::IsInitialized() const {
  return true;
}

void RequestContent::Swap(RequestContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestContent::InternalSwap(RequestContent* other) {
  using std::swap;
  namespace_vec_.InternalSwap(CastToBase(&other->namespace_vec_));
  host_info_.Swap(&other->host_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appid_.Swap(&other->appid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestContent::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ResponseContent_NamespaceConfigMapEntry_DoNotUse::ResponseContent_NamespaceConfigMapEntry_DoNotUse() {}
ResponseContent_NamespaceConfigMapEntry_DoNotUse::ResponseContent_NamespaceConfigMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ResponseContent_NamespaceConfigMapEntry_DoNotUse::MergeFrom(const ResponseContent_NamespaceConfigMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ResponseContent_NamespaceConfigMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[2];
}
void ResponseContent_NamespaceConfigMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void ResponseContent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseContent::kTimestampFieldNumber;
const int ResponseContent::kAckFieldNumber;
const int ResponseContent::kAppidFieldNumber;
const int ResponseContent::kNamespaceConfigMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseContent::ResponseContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_2eproto::scc_info_ResponseContent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EAST_TCP.ResponseContent)
}
ResponseContent::ResponseContent(const ResponseContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace_config_map_.MergeFrom(from.namespace_config_map_);
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appid().size() > 0) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ack_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(ack_));
  // @@protoc_insertion_point(copy_constructor:EAST_TCP.ResponseContent)
}

void ResponseContent::SharedCtor() {
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ack_));
}

ResponseContent::~ResponseContent() {
  // @@protoc_insertion_point(destructor:EAST_TCP.ResponseContent)
  SharedDtor();
}

void ResponseContent::SharedDtor() {
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseContent::descriptor() {
  ::protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseContent& ResponseContent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_2eproto::scc_info_ResponseContent.base);
  return *internal_default_instance();
}


void ResponseContent::Clear() {
// @@protoc_insertion_point(message_clear_start:EAST_TCP.ResponseContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace_config_map_.Clear();
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ack_));
  _internal_metadata_.Clear();
}

bool ResponseContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EAST_TCP.ResponseContent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appid().data(), static_cast<int>(this->appid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EAST_TCP.ResponseContent.appid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> namespace_config_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          ResponseContent_NamespaceConfigMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ResponseContent_NamespaceConfigMapEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&namespace_config_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EAST_TCP.ResponseContent.NamespaceConfigMapEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EAST_TCP.ResponseContent.NamespaceConfigMapEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EAST_TCP.ResponseContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EAST_TCP.ResponseContent)
  return false;
#undef DO_
}

void ResponseContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EAST_TCP.ResponseContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int64 ack = 2;
  if (this->ack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ack(), output);
  }

  // string appid = 3;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), static_cast<int>(this->appid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.ResponseContent.appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->appid(), output);
  }

  // map<string, string> namespace_config_map = 4;
  if (!this->namespace_config_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "EAST_TCP.ResponseContent.NamespaceConfigMapEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "EAST_TCP.ResponseContent.NamespaceConfigMapEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->namespace_config_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->namespace_config_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namespace_config_map().begin();
          it != this->namespace_config_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ResponseContent_NamespaceConfigMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namespace_config_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ResponseContent_NamespaceConfigMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namespace_config_map().begin();
          it != this->namespace_config_map().end(); ++it) {
        entry.reset(namespace_config_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EAST_TCP.ResponseContent)
}

::google::protobuf::uint8* ResponseContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EAST_TCP.ResponseContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int64 ack = 2;
  if (this->ack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ack(), target);
  }

  // string appid = 3;
  if (this->appid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appid().data(), static_cast<int>(this->appid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EAST_TCP.ResponseContent.appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // map<string, string> namespace_config_map = 4;
  if (!this->namespace_config_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "EAST_TCP.ResponseContent.NamespaceConfigMapEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "EAST_TCP.ResponseContent.NamespaceConfigMapEntry.value");
      }
    };

    if (deterministic &&
        this->namespace_config_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->namespace_config_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namespace_config_map().begin();
          it != this->namespace_config_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ResponseContent_NamespaceConfigMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(namespace_config_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ResponseContent_NamespaceConfigMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->namespace_config_map().begin();
          it != this->namespace_config_map().end(); ++it) {
        entry.reset(namespace_config_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EAST_TCP.ResponseContent)
  return target;
}

size_t ResponseContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EAST_TCP.ResponseContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> namespace_config_map = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->namespace_config_map_size());
  {
    ::std::unique_ptr<ResponseContent_NamespaceConfigMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->namespace_config_map().begin();
        it != this->namespace_config_map().end(); ++it) {
      entry.reset(namespace_config_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string appid = 3;
  if (this->appid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appid());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 ack = 2;
  if (this->ack() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ack());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EAST_TCP.ResponseContent)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EAST_TCP.ResponseContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EAST_TCP.ResponseContent)
    MergeFrom(*source);
  }
}

void ResponseContent::MergeFrom(const ResponseContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EAST_TCP.ResponseContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namespace_config_map_.MergeFrom(from.namespace_config_map_);
  if (from.appid().size() > 0) {

    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.ack() != 0) {
    set_ack(from.ack());
  }
}

void ResponseContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EAST_TCP.ResponseContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseContent::CopyFrom(const ResponseContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EAST_TCP.ResponseContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseContent::IsInitialized() const {
  return true;
}

void ResponseContent::Swap(ResponseContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseContent::InternalSwap(ResponseContent* other) {
  using std::swap;
  namespace_config_map_.Swap(&other->namespace_config_map_);
  appid_.Swap(&other->appid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(ack_, other->ack_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseContent::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace EAST_TCP
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EAST_TCP::MsgContent* Arena::CreateMaybeMessage< ::EAST_TCP::MsgContent >(Arena* arena) {
  return Arena::CreateInternal< ::EAST_TCP::MsgContent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EAST_TCP::RequestContent* Arena::CreateMaybeMessage< ::EAST_TCP::RequestContent >(Arena* arena) {
  return Arena::CreateInternal< ::EAST_TCP::RequestContent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::EAST_TCP::ResponseContent_NamespaceConfigMapEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EAST_TCP::ResponseContent* Arena::CreateMaybeMessage< ::EAST_TCP::ResponseContent >(Arena* arena) {
  return Arena::CreateInternal< ::EAST_TCP::ResponseContent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
